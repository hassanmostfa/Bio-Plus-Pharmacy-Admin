import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";

// Define your base URL
const baseUrl = "https://back.biopluskw.com/api/v1";

// Custom baseQuery that redirects on 401 Unauthorized
const baseQueryWithRedirect = async (args, api, extraOptions) => {
  const rawBaseQuery = fetchBaseQuery({
    baseUrl,
    prepareHeaders: (headers) => {
      const token = localStorage.getItem("token");
      if (token) {
        headers.set("Authorization", `Bearer ${token}`);
      }
      return headers;
    },
  });

  const result = await rawBaseQuery(args, api, extraOptions);

  if (result?.error?.status === 401) {
    localStorage.removeItem("token");
    window.location.href = "/admin/auth/sign-in"; // Adjust this if needed
  }

  return result;
};

// Create the API slice using RTK Query
export const pharmacyApi = createApi({
  reducerPath: "pharmacyApi",
  baseQuery: baseQueryWithRedirect,
  endpoints: (builder) => ({
    getPharmacies: builder.query({
      query: () => '/admin/pharmacies',
    }),
    getPharmacy: builder.query({
      query: (id) => `/admin/pharmacies/${id}`,
    }),
    addPharmacy: builder.mutation({
      query: (pharmacy) => ({
        url: "/admin/pharmacies",
        method: "POST",
        body: pharmacy,
      }),
    }),
    updatePharmacy: builder.mutation({
      query: ({ id, pharmacy }) => ({
        url: `/admin/pharmacies/${id}`,
        method: "PUT",
        body: pharmacy,
      }),
    }),
    deletePharmacy: builder.mutation({
      query: (id) => ({
        url: `/admin/pharmacies/${id}`,
        method: "DELETE",
      }),
    }),
    getStats: builder.query({
      query: () => '/admin/stats/pharmacy',
    }),
    getHighestSellingProducts: builder.query({
      query: (pharmacyId) => `/admin/pharmacy-analytics/highest-selling-products/${pharmacyId}`,
    }),
    getLowStockProducts: builder.query({
      query: (pharmacyId) => `/admin/pharmacy-analytics/low-stock-products/${pharmacyId}`,
    }),
    // Add the new pharmacy report endpoint
    getPharmacyReport: builder.query({
      query: (pharmacyId) => `/admin/pharmacy-analytics/pharmacy-report/${pharmacyId}`,
    }),
  }),
});

// Export hooks generated by the API service
export const {
  useGetPharmaciesQuery,
  useGetPharmacyQuery,
  useAddPharmacyMutation,
  useUpdatePharmacyMutation,
  useDeletePharmacyMutation,
  useGetStatsQuery,
  useGetHighestSellingProductsQuery,
  useGetLowStockProductsQuery,
  useGetPharmacyReportQuery, // Export the new hook
} = pharmacyApi;